# This is a custom imaage of the resposity to reduce the start up time for developers.
# this is not jsut a tool chain but aslso all the packagaes and gesm that is needed to kept uptodate.

# with this workflow we build the Jekyll website. We use a custom Docker image that contains
# all the necessary tools and gems to build the website. This way we can speed up the build
# process and make sure that the build environment is consistent across different machines.

name: Docker - Build and publish

on:
  workflow_dispatch:
  release:
    types:
      - published

env:
  IMAGE_NAME: "patchnotes-site-jekyll-environment"

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            src/Gemfile
            src/Gemfile.lock
            Dockerfile
            .dockerignore
            compose.yml
          sparse-checkout-cone-mode: false
      - name: Log in to Github Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

        # Try to retrives the lastest relese tag. if fail the efualt to '0.0.0'
      - name: Extract latest release tag
        id: extract_latest_release_tag
        run: |
          LATEST_TAG=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)

          if [[ $LATEST_TAG == "null" || -z "$LATEST_TAG" ]]; then
            LATEST_TAG="0.0.0"
          else
            LATEST_TAG="${LATEST_TAG#v}" # removed leading 'v' if exists
          fi

          echo "VERSION=$LATEST_TAG" >> $GITHUB_ENV

      # Docker only accepets lowercase tags
      - name: Normalize image tag
        env:
          REPO_OWNER: ${{ github.repository_owner }}
        run: echo "IMAGE_TAG=ghcr.io/${REPO_OWNER,,}/${{env.IMAGE_NAME}}" >> $GITHUB_ENV

      # Build the Docker image
      - name: Build the Docker image
        run: |
          docker build -t ${{ env.IMAGE_TAG }}:latest .
          docker tag ${{ env.IMAGE_TAG }}:latest ${{ env.IMAGE_TAG }}:${{ env.VERSION }}

      # Push the Docker image to Github Container Registry
      - name: Push the Docker image
        run: |
          docker push ${{ env.IMAGE_TAG }}:latest
          docker push ${{ env.IMAGE_TAG }}:${{ env.VERSION }}
